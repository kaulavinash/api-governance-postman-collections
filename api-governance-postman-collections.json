{
    "info": {
        "_postman_id": "9c16e96a-722d-4e58-a5f3-011badc69580",
        "name": "API Governance",
        "description": "This is a collection of requests that can be used to evaluate a Postman API for specific rules and guidelines established as part of the governance of APIs being deployed across an organization. Applying tests to not the request or response of an API, but actually applying it to the details of the APIs design.\n\nThis collection is an evolving set of API governance requests and is meant to demonstrate how Postman testing can be used for API design governance, allowing anyone to fork and begin evolving to meet their own needs when it comes to governance. This collection is being evolved and managed using GitHub, so if you have any questions or requests you can submit a GitHub issue on the repository.\n\n**GitHub URL**: [https://github.com/api-evangelist/api-governance-postman-collections](https://github.com/api-evangelist/api-governance-postman-collections)",
        "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
    },
    "item": [
        {
            "name": "Info",
            "item": [
                {
                    "name": "Validate the Name Of The API",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var title = oai.info.title;",
                                    "",
                                    "console.log(openapi_current);",
                                    "",
                                    "// Is the title greater than five?",
                                    "var greater_than_five = 0;",
                                    "if(title.length > 5){",
                                    "  greater_than_five = 1;  ",
                                    "}",
                                    "pm.test(\"Title of API is greater than 5\", function () {",
                                    "    pm.expect(greater_than_five).to.eql(1);",
                                    "});",
                                    "",
                                    "// What else can we do that is more meaningful?"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "This will vaidate that the name of the API meets all requirements."
                    },
                    "response": []
                },
                {
                    "name": "Validate the Description for the API",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "// Has description?",
                                    "var has_description = 0;",
                                    "if(oai.info.description){",
                                    "    has_description = 1;",
                                    "}",
                                    "pm.test(\"Has a description for the API\", function () {",
                                    "    pm.expect(has_description).to.eql(1);",
                                    "});",
                                    "",
                                    "",
                                    "if(has_description == 0){",
                                    "  var greater_than_hundred = 0;",
                                    "  var less_than_thousand = 0;",
                                    "}",
                                    "else{",
                                    "    ",
                                    "    var description = oai.info.description;",
                                    "    ",
                                    "    // Description is greater than 100",
                                    "    var greater_than_hundred = 0;",
                                    "    if(description.length > 100){",
                                    "      greater_than_hundred = 1;  ",
                                    "    }",
                                    "    ",
                                    "    // Description is less than 1000",
                                    "    var less_than_thousand = 0;",
                                    "    if(description.length < 1000){",
                                    "      less_than_thousand = 1;  ",
                                    "    }    ",
                                    "",
                                    "}",
                                    "",
                                    "pm.test(\"API description is greater than 100\", function () {",
                                    "    pm.expect(greater_than_hundred).to.eql(1);",
                                    "});",
                                    "",
                                    "pm.test(\"API description is less than 1000\", function () {",
                                    "    pm.expect(less_than_thousand).to.eql(1);",
                                    "});",
                                    ""
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "This is for ensuring the description of the API meets all requirements."
                    },
                    "response": []
                }
            ],
            "description": "These API governance requests for on the name, description, and other information elements of the API, helping developers understand what is possible with an API.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Paths",
            "item": [
                {
                    "name": "Ensure Words Are Used in Paths",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var has_api_paths = 0;",
                                    "",
                                    "var all_resources = [];",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "        ",
                                    "        var path_array = path.split(\"/\");",
                                    "        ",
                                    "        for (aIndex = 0; aIndex < path_array.length; aIndex++) {",
                                    "       ",
                                    "            var segment = path_array[aIndex];",
                                    "            if(segment.length > 0){",
                                    "                ",
                                    "                var variable = segment.includes(\"{\");",
                                    "                ",
                                    "                //console.log(\"variable: \" + variable);",
                                    "                if(!variable){",
                                    "",
                                    "                  var already_stored = 0;",
                                    "                  ",
                                    "                  for (bIndex = 0; bIndex < all_resources.length; bIndex++) {",
                                    "                    if(segment === all_resources[bIndex]){",
                                    "                        already_stored = 1;",
                                    "                    }",
                                    "                  }",
                                    "                  ",
                                    "                 var s = {};",
                                    "                 s['word'] = segment;",
                                    "                 s['path'] = path;",
                                    "                  ",
                                    "                if(already_stored === 0){",
                                    "                    all_resources.push(s);",
                                    "                }   ",
                                    "                  ",
                                    "            }",
                                    "        }",
                                    "            ",
                                    "    }",
                                    "        ",
                                    "}",
                                    "",
                                    "} ",
                                    "",
                                    "console.log(all_resources);",
                                    "",
                                    "var postman_api_url = 'https://gist.githubusercontent.com/kinlane/cfeea900c5112794576d45eaca359c1b/raw/d302473b467b001915365f144f04f8bc4ccb6041/words.json';",
                                    "",
                                    "const apiVersionsRequest = {",
                                    "  url: postman_api_url,",
                                    "  method: 'GET'",
                                    "};",
                                    "",
                                    "pm.sendRequest(apiVersionsRequest, function (err, res) {",
                                    "    if (err) {",
                                    "        console.log(err);",
                                    "    } else {  ",
                                    "",
                                    "        var words = res.json(); ",
                                    "        ",
                                    "        for (aIndex = 0; aIndex < all_resources.length; aIndex++) {",
                                    "            ",
                                    "            var resource_a_word = 0",
                                    "            var resource = all_resources[aIndex].word;",
                                    "            var path = all_resources[aIndex].path;",
                                    "            ",
                                    "            for (bIndex = 0; bIndex < words.length; bIndex++) {",
                                    "                if(all_resources[aIndex].word === words[bIndex].word){",
                                    "                   resource_a_word = 1; ",
                                    "                }",
                                    "            }    ",
                                    "            ",
                                    "            pm.test(resource + \" from \" + path + \" is a word\", function () {",
                                    "                pm.expect(resource_a_word).to.eql(1);",
                                    "            });            ",
                                    "        }",
                                    "        ",
                                    "    }",
                                    "});",
                                    "",
                                    ""
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "This loops through each segment of each API path and checks to see if it is a word. It ignores variables. This relies upon a [word dictionary](https://gist.github.com/kinlane/cfeea900c5112794576d45eaca359c1b) as the source of what is a word."
                    },
                    "response": []
                }
            ],
            "description": "These API governance requests are focused on the available API paths present in an API being defined as part of this worksapce, ensuring that the design of API paths are in alignment with the overall governance strategy.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Methods",
            "item": [
                {
                    "name": "Check For GET, POST, PUT, and DELETE",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var has_api_paths = 0;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            console.log(method);",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "pm.test(\"API has paths\", function () {",
                                    "    pm.expect(has_api_paths).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "This checks to make sure all resources have a GET, POST, PUT, and DELETE, providing a full CRUD profile for each unique resource - still working on this one."
                    },
                    "response": []
                },
                {
                    "name": "Check All Methods Have Summaries",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var has_api_paths = 0;",
                                    "",
                                    "var all_api_paths_have_summary = 1;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            console.log(method);",
                                    "            ",
                                    "            var has_method_summary = 0;",
                                    "            if(method.summary){",
                                    "            ",
                                    "                // Is method summary > 5",
                                    "                if(method.summary.length > 5){",
                                    "                  has_method_summary = 1;  ",
                                    "                }     ",
                                    "                else{",
                                    "                    has_method_summary = 0;",
                                    "                }",
                                    "                ",
                                    "            }",
                                    "            ",
                                    "        if(has_method_summary===0){",
                                    "            pm.test(path + \" does not have a summary\", function () {",
                                    "                pm.expect(has_method_summary).to.eql(1);",
                                    "            });      ",
                                    "            all_api_paths_have_summary = 0;",
                                    "        }",
                                    "            ",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "if(all_api_paths_have_summary===1){",
                                    "    pm.test(\"all API paths have a summary\", function () {",
                                    "        pm.expect(all_api_paths_have_summary).to.eql(1);",
                                    "    }); ",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Checks to see if all methods have summaries written for them."
                    },
                    "response": []
                },
                {
                    "name": "Check All Methods Have Descriptions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var has_api_paths = 0;",
                                    "",
                                    "var all_api_paths_have_description = 1;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            console.log(method);",
                                    "            ",
                                    "            var has_method_description = 0;",
                                    "            if(method.description){",
                                    "            ",
                                    "                // Is method summary > 5",
                                    "                if(method.description.length > 5){",
                                    "                    has_method_description = 1;  ",
                                    "                }     ",
                                    "                else{",
                                    "                    has_method_description = 0;",
                                    "                }",
                                    "                ",
                                    "            }",
                                    "            ",
                                    "        if(has_method_description===0){",
                                    "            pm.test(path + \" does not have a description\", function () {",
                                    "                pm.expect(has_method_description).to.eql(1);",
                                    "            });      ",
                                    "            all_api_paths_have_description = 0;",
                                    "        }",
                                    "            ",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "if(all_api_paths_have_description===1){",
                                    "    pm.test(\"all API paths have a description\", function () {",
                                    "        pm.expect(all_api_paths_have_description).to.eql(1);",
                                    "    }); ",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Checks to see if all methods have descriptions written for them, and checks the length."
                    },
                    "response": []
                },
                {
                    "name": "Check All Methods Have Operation Ids",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var has_api_paths = 0;",
                                    "",
                                    "var all_api_paths_have_operation_id = 1;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            console.log(method);",
                                    "            ",
                                    "            var has_method_operation_id = 0;",
                                    "            if(method.operationId){",
                                    "            ",
                                    "                // Is method summary > 5",
                                    "                if(method.operationId.length > 5){",
                                    "                  has_method_operation_id = 1;  ",
                                    "                }     ",
                                    "                else{",
                                    "                    has_method_operation_id = 0;",
                                    "                }",
                                    "                ",
                                    "            }",
                                    "            ",
                                    "        if(has_method_operation_id===0){",
                                    "            pm.test(path + \" does not have an operationId\", function () {",
                                    "                pm.expect(has_method_operation_id).to.eql(1);",
                                    "            });      ",
                                    "            all_api_paths_have_operation_id = 0;",
                                    "        }",
                                    "            ",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "if(all_api_paths_have_operation_id===1){",
                                    "    pm.test(\"all API paths have an operationId\", function () {",
                                    "        pm.expect(all_api_paths_have_operation_id).to.eql(1);",
                                    "    }); ",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Checks to see if all methods have operationIds written for them."
                    },
                    "response": []
                },
                {
                    "name": "Check All Methods Have Tags",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var all_methods_have_tags = 1;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            console.log(method);",
                                    "            ",
                                    "            var tags = method.tags;",
                                    "            console.log(tags);",
                                    "            var tag_count = tags.length;",
                                    "            console.log(tag_count);",
                                    "            if(tag_count > 0){",
                                    "                var have_tags = 1;",
                                    "            }",
                                    "            else{",
                                    "                var have_tags = 0;",
                                    "                all_methods_have_tags = 0;",
                                    "                pm.test(path + ' - ' + verb + ' method does not have tags.', function () {",
                                    "                    pm.expect(have_tags).to.eql(1);",
                                    "                });                ",
                                    "            }",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "pm.test(\"All API methods have tags\", function () {",
                                    "    pm.expect(all_methods_have_tags).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Make sure all methods have some tags."
                    },
                    "response": []
                }
            ],
            "description": "These API governance requests focus on ensuring each API method has all of the required details when it comes to describing what is possible with each individual HTTP method present as part of an API.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Parameters",
            "item": [
                {
                    "name": "Make Sure All Method Query Parameters Are Camel Case",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var has_api_paths = 0;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            console.log(method);",
                                    "            ",
                                    "            ",
                                    "            if(method.parameters){",
                                    "            ",
                                    "                var parameters = method.parameters;",
                                    "                ",
                                    "                for (pIndex = 0; pIndex < parameters.length; pIndex++) {",
                                    "                    ",
                                    "                    name = parameters[pIndex].name;",
                                    "                    ",
                                    "                    name = 'camelCase';",
                                    "                    ",
                                    "                    var camelCase = (^[a-z]|[A-Z0-9])[a-z];",
                                    "                    isCamelCase = camelCase.test(name);     ",
                                    "                    console.log(isCamelCase);",
                                    "                    ",
                                    "                }",
                                    "                ",
                                    "            ",
                                    "            }",
                                    "            ",
                                    "            ",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "pm.test(\"API has paths\", function () {",
                                    "    pm.expect(has_api_paths).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Makes sure all of the parameters are camel case -- still working on this one."
                    },
                    "response": []
                },
                {
                    "name": "Make Sure All Method Query Parameters Have Descriptiions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var all_parameter_descriptions_Have_paths = 1;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            console.log(method);",
                                    "            ",
                                    "            if(method.parameters){",
                                    "            ",
                                    "                var parameters = method.parameters;",
                                    "                ",
                                    "                for (pIndex = 0; pIndex < parameters.length; pIndex++) {",
                                    "                    ",
                                    "                    name = parameters[pIndex].name;",
                                    "                    ",
                                    "                    if(parameters[pIndex].description){",
                                    "                    ",
                                    "                        description = parameters[pIndex].description;",
                                    "                        ",
                                    "                        // Description is greater than 100",
                                    "                        var greater_than_hundred = 0;",
                                    "                        if(description.length > 100){",
                                    "                          greater_than_hundred = 1;  ",
                                    "                        }",
                                    "                        ",
                                    "                        // Description is less than 1000",
                                    "                        var less_than_thousand = 0;",
                                    "                        if(description.length < 1000){",
                                    "                          less_than_thousand = 1;  ",
                                    "                        }        ",
                                    "                        ",
                                    "                        pm.test(path + ' - ' + verb + ' - ' + name + ' description is greater than 100', function () {",
                                    "                            pm.expect(greater_than_hundred).to.eql(1);",
                                    "                        });",
                                    "                        ",
                                    "                        pm.test(path + ' - ' + verb + ' - ' + name + ' description is less than 1000', function () {",
                                    "                            pm.expect(less_than_thousand).to.eql(1);",
                                    "                        });",
                                    "                        ",
                                    "                        ",
                                    "                    ",
                                    "                    }",
                                    "                    else{",
                                    "                        var all_parameter_descriptions_Have_paths = 0;",
                                    "                    }",
                                    "                }",
                                    "                ",
                                    "            ",
                                    "            }",
                                    "            ",
                                    "            ",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "pm.test(\"API has paths\", function () {",
                                    "    pm.expect(has_api_paths).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Makes sure that all method query parameters have descriptions."
                    },
                    "response": []
                }
            ],
            "description": "These API governance requets focus on the query parameters for each of the individual API methods present, making sure all of the required details are present.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Responses",
            "item": [
                {
                    "name": "Check For HTTP Status Success (2xx)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var all_methods_have_2xx = 1;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            //console.log(method);",
                                    "            ",
                                    "            var response = method.responses;",
                                    "            ",
                                    "            console.log(response);",
                                    "            ",
                                    "            if(response['200']){",
                                    "                var have_2xx_response = 1;",
                                    "                console.log(\"200\");",
                                    "            }",
                                    "            else if(response['201']){",
                                    "                var have_2xx_response = 1;",
                                    "                console.log(\"201\");",
                                    "            }   ",
                                    "            else if(response['202']){",
                                    "                var have_2xx_response = 1;",
                                    "                console.log(\"201\");",
                                    "            }             ",
                                    "            else if(response['204']){",
                                    "                var have_2xx_response = 1;",
                                    "                console.log(\"204\");",
                                    "            }            ",
                                    "            else{",
                                    "                console.log(\"NONE\");",
                                    "                var have_2xx_response = 0;",
                                    "                all_methods_have_2xx = 0;",
                                    "                pm.test(path + ' - ' + verb + ' method does not have a 200 series response.', function () {",
                                    "                    pm.expect(have_2xx_response).to.eql(1);",
                                    "                });                ",
                                    "            }            ",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "pm.test(\"All API methods have a 200 response\", function () {",
                                    "    pm.expect(all_methods_have_2xx).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Checks to see if all methods have a 2xx response."
                    },
                    "response": []
                },
                {
                    "name": "Check For HTTP Status Failure (5xx)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var all_methods_have_5xx = 1;",
                                    "",
                                    "if(oai.paths){",
                                    "",
                                    "    var paths = oai.paths;",
                                    "    ",
                                    "    for (const [path, methods] of Object.entries(paths)) {",
                                    "       ",
                                    "        console.log(path);",
                                    "       ",
                                    "        for (const [verb, method] of Object.entries(methods)) {",
                                    "            ",
                                    "            console.log(verb);",
                                    "            ",
                                    "            //console.log(method);",
                                    "            ",
                                    "            var response = method.responses;",
                                    "            ",
                                    "            console.log(response);",
                                    "            ",
                                    "            if(response['500']){",
                                    "                var have_5xx_response = 1;",
                                    "                console.log(\"500\");",
                                    "            }",
                                    "            else if(response['501']){",
                                    "                var have_5xx_response = 1;",
                                    "                console.log(\"501\");",
                                    "            }             ",
                                    "            else{",
                                    "                console.log(\"NONE\");",
                                    "                var have_5xx_response = 0;",
                                    "                all_methods_have_5xx = 0;",
                                    "                pm.test(path + ' - ' + verb + ' method does not have a 500 series response.', function () {",
                                    "                    pm.expect(have_5xx_response).to.eql(1);",
                                    "                });                ",
                                    "            }            ",
                                    "            ",
                                    "        }       ",
                                    "        ",
                                    "    }",
                                    "",
                                    "} ",
                                    "",
                                    "pm.test(\"All API methods have a 500 response\", function () {",
                                    "    pm.expect(all_methods_have_5xx).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Checks to see if all methods have a 5xx response."
                    },
                    "response": []
                }
            ],
            "description": "These API governance requests focus on evaluating the responses that are defined for each API method, making sure they have the required HTTP status code, media types, and other elements present.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Schema",
            "item": [
                {
                    "name": "Check If Any Schema Have Properties",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var all_schema_have_properties = 1;",
                                    "",
                                    "var schemas = oai.components.schemas;",
                                    "",
                                    "for (const [schema_name, schema] of Object.entries(schemas)) {",
                                    "   ",
                                    "   console.log(schema_name); ",
                                    "   ",
                                    "   if(schema.properties){",
                                    "       var properties = schema.properties;",
                                    "       console.log(\"has properties\");",
                                    "       console.log(properties);",
                                    "   }",
                                    "   else{",
                                    "     if(schema.type){",
                                    "         ",
                                    "         if(schema.type== 'array'){",
                                    "            console.log(\"no properties -- array\");    ",
                                    "            }",
                                    "        else{",
                                    "            console.log(\"no properties -- \" + schema.type);    ",
                                    "            all_schema_have_properties = 0;",
                                    "            no_properties = 0;",
                                    "            pm.test(\"All schema for this API have properties\", function () {",
                                    "                pm.expect(no_properties).to.eql(1);",
                                    "            });            ",
                                    "            ",
                                    "        }",
                                    "         ",
                                    "     }",
                                    "   }",
                                    "}",
                                    "",
                                    "pm.test(\"All schema for this API have properties\", function () {",
                                    "    pm.expect(all_schema_have_properties).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Checks to make sure all schema have properties."
                    },
                    "response": []
                },
                {
                    "name": "Make Sure All Schema Properties Have Descriptions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "var openapi_current = pm.environment.get(\"openapi_current\");",
                                    "var oai = JSON.parse(openapi_current);",
                                    "",
                                    "var all_schema_properties_have_descriptions = 1;",
                                    "",
                                    "var schemas = oai.components.schemas;",
                                    "",
                                    "for (const [schema_name, schema] of Object.entries(schemas)) {",
                                    "   ",
                                    "   console.log(schema_name); ",
                                    "   ",
                                    "   if(schema.properties){",
                                    "       for (const [property_name, property] of Object.entries(schema.properties)) {",
                                    "       console.log(property_name);",
                                    "       ",
                                    "            if(property.description){",
                                    "            ",
                                    "                description = property.description;",
                                    "                ",
                                    "                // Description is greater than 100",
                                    "                var greater_than_hundred = 0;",
                                    "                if(description.length > 100){",
                                    "                  greater_than_hundred = 1;  ",
                                    "                }",
                                    "                ",
                                    "                // Description is less than 1000",
                                    "                var less_than_thousand = 0;",
                                    "                if(description.length < 1000){",
                                    "                  less_than_thousand = 1;  ",
                                    "                }        ",
                                    "                ",
                                    "                pm.test(schema_name + ' - ' + property_name + ' description is greater than 100', function () {",
                                    "                    pm.expect(greater_than_hundred).to.eql(1);",
                                    "                });",
                                    "                ",
                                    "                pm.test(schema_name + ' - ' + property_name + ' description is less than 1000', function () {",
                                    "                    pm.expect(less_than_thousand).to.eql(1);",
                                    "                });",
                                    "                ",
                                    "                ",
                                    "            ",
                                    "            }",
                                    "            else{",
                                    "                var all_schema_properties_have_descriptions = 0;",
                                    "                ",
                                    "                no_description = 0;  ",
                                    "                pm.test(schema_name + ' - ' + property_name + ' does not have a description', function () {",
                                    "                    pm.expect(no_description).to.eql(1);",
                                    "                });                ",
                                    "                ",
                                    "            }       ",
                                    "       ",
                                    "       ",
                                    "       }",
                                    "   }",
                                    "   ",
                                    "}",
                                    "",
                                    "pm.test(\"All schema for this API have property descriptions\", function () {",
                                    "    pm.expect(all_schema_properties_have_descriptions).to.eql(1);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "https://postman-echo.com/get",
                        "description": "Checks to see if all schema properties have descriptions."
                    },
                    "response": []
                }
            ],
            "description": "These API governance requests focus on evaluating the schema being defined as part of each API definition, making sure that the underlying schema for each API is well defined.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Pull API Into Environment",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "var response = pm.response.json();",
                            "",
                            "var postman_api_key = pm.environment.get(\"postman_api_key\");",
                            "",
                            "var apis = response.apis;",
                            "",
                            "// parse the query string",
                            "const paramsString = request.url.split('?')[1];",
                            "const eachParamArray = paramsString.split('&');",
                            "let params = {};",
                            "eachParamArray.forEach((param) => {",
                            "    const key = param.split('=')[0];",
                            "    const value = param.split('=')[1];",
                            "    Object.assign(params, {[key]: value});",
                            "});",
                            "",
                            "// set incoming values",
                            "var api_request_name = params.api_name;",
                            "var api_request_version = params.api_version;",
                            "if(api_request_version===''){",
                            "    api_request_version = 'Draft';",
                            "}",
                            "",
                            "pm.environment.set(\"postman_api_name\", api_request_name);",
                            "",
                            "// loop through each api",
                            "for (aIndex = 0; aIndex < apis.length; aIndex++) {",
                            "    ",
                            "    var api_id = apis[aIndex].id;",
                            "    var api_name = apis[aIndex].name;",
                            "    var api_summary = apis[aIndex].summary;",
                            "    var api_description = apis[aIndex].description;",
                            "    var api_createdAt = apis[aIndex].createdAt;",
                            "    var api_updatedAt = apis[aIndex].updatedAt;",
                            "    var api_createdBy = apis[aIndex].createdBy;",
                            "    var api_updatedBy = apis[aIndex].updatedBy;",
                            "    ",
                            "    // if our incoming api matches then this is our API",
                            "    if(api_request_name==api_name){",
                            "        ",
                            "        console.log(\"API ID: \" + api_id);",
                            "        console.log(\"API Name: \" + api_name);",
                            "        ",
                            "        var postman_api_url = 'https://api.getpostman.com/apis/' + api_id + '/versions';",
                            "        ",
                            "        const apiVersionsRequest = {",
                            "          url: postman_api_url,",
                            "          method: 'GET',",
                            "          header: 'x-api-key:' + postman_api_key",
                            "        };",
                            "        ",
                            "        pm.sendRequest(apiVersionsRequest, function (err, res) {",
                            "            if (err) {",
                            "                console.log(err);",
                            "            } else {  ",
                            "                ",
                            "                var api_version_response = res.json();",
                            "                ",
                            "                var versions = api_version_response.versions;",
                            "                ",
                            "                //console.log(versions);",
                            "                ",
                            "                for (vIndex = 0; vIndex < versions.length; vIndex++) {",
                            "                    ",
                            "                    version_id = versions[vIndex].id;",
                            "                    version_name = versions[vIndex].name;",
                            "                    api_id = versions[vIndex].api;",
                            "                    version_createdAt = versions[vIndex].createdAt;",
                            "                    version_updatedAt = versions[vIndex].updatedAt;",
                            "                    version_createdBy = versions[vIndex].createdBy;",
                            "                    version_updatedBy = versions[vIndex].updatedBy;",
                            "                    version_lastRevision = versions[vIndex].lastRevision;",
                            "        ",
                            "                    pm.environment.set(\"postman_api_id\", api_id);",
                            "                    pm.environment.set(\"postman_api_version_id\", version_id);",
                            "                    pm.environment.set(\"postman_api_version_name\", version_name);         ",
                            "",
                            "                    if(api_request_version===version_name){",
                            "                        ",
                            "                        //console.log(version_id + ' - ' + version_name);",
                            "                        ",
                            "                        var postman_versions_url = 'https://api.getpostman.com/apis/' + api_id + '/versions/' + version_id;",
                            "                        ",
                            "                        const apiVersionRequest = {",
                            "                          url: postman_versions_url,",
                            "                          method: 'GET',",
                            "                          header: 'x-api-key:' + postman_api_key",
                            "                        };",
                            "                        ",
                            "                        pm.sendRequest(apiVersionRequest, function (err, res) {",
                            "                            if (err) {",
                            "                                console.log(err);",
                            "                            } else {  ",
                            "                                ",
                            "                                var api_version_detail_response = res.json();   ",
                            "                                ",
                            "                                var schema_id = api_version_detail_response.version.schema[0];",
                            "                                pm.environment.set(\"postman_schema_id\", schema_id);",
                            "                                ",
                            "                                //console.log(\"schema_id: \" + schema_id);",
                            "                                        ",
                            "                                var postman_schema_url = 'https://api.getpostman.com/apis/' + api_id + '/versions/' + version_id + '/schemas/' + schema_id;",
                            "                                ",
                            "                                const apiSchemaRequest = {",
                            "                                  url: postman_schema_url,",
                            "                                  method: 'GET',",
                            "                                  header: 'x-api-key:' + postman_api_key",
                            "                                };",
                            "                                ",
                            "                                pm.sendRequest(apiSchemaRequest, function (err, res) {",
                            "                                    if (err) {",
                            "                                        console.log(err);",
                            "                                    } else {  ",
                            "                                        ",
                            "                                    var api_schema_response = res.json();  ",
                            "                                    //console.log(api_schema_response);",
                            "                                    ",
                            "                                    var schema_type = api_schema_response.schema.type;",
                            "                                    var schema_createdBy = api_schema_response.schema.createdBy;",
                            "                                    var schema_updatedBy = api_schema_response.schema.updatedBy;",
                            "                                    var schema_language = api_schema_response.schema.language;",
                            "                                    var schema_createdAt = api_schema_response.schema.createdAt;",
                            "                                    var schema_updatedAt = api_schema_response.schema.updatedAt;",
                            "                                    var schema_body = api_schema_response.schema.schema;",
                            "                                    if(schema_type=='openapi3'){",
                            "                                        // We Have Our Schema",
                            "                                        //console.log(schema_body);",
                            "                                        ",
                            "                                        pm.environment.set(\"openapi_current\", schema_body);",
                            "                                        ",
                            "                                        var oas = JSON.parse(schema_body);",
                            "                                        ",
                            "                                        // Assumption - That schema array is table name -- only focused on one resource per openapi",
                            "                                        for (const [schema, object] of Object.entries(oas.components.schemas)) {",
                            "                                           if(object.type === 'array'){",
                            "                                               table_name = schema;",
                            "                                               table_name = table_name.replace(\" \",\"_\");",
                            "                                               table_name = table_name.toLowerCase()",
                            "                                               pm.environment.set(\"aws_dynamodb_table_name\", table_name);",
                            "                                           }",
                            "                                           if(object.type === 'object'){",
                            "                                               if(schema==='Error'){",
                            "                                               }",
                            "                                               else{",
                            "                                               resource_name = schema;",
                            "                                               resource_slug = resource_name.replace(\" \",\"_\");",
                            "                                               resource_slug = resource_slug.toLowerCase();",
                            "                                               }",
                            "                                           }     ",
                            "                                        }   ",
                            "                                        ",
                            "                                        ",
                            "                                    }",
                            "                                    ",
                            "                                    }",
                            "                                });                                ",
                            "                                        ",
                            "                                ",
                            "                                ",
                            "                            }",
                            "                        });",
                            "                        ",
                            "                    }",
                            "                }",
                            "                ",
                            "            }",
                            "        });",
                            "        ",
                            "    }",
                            "",
                            "}"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "x-api-key",
                        "type": "text",
                        "value": "{{postman_api_key}}"
                    }
                ],
                "url": {
                    "raw": "https://api.getpostman.com/apis/?workspace_name=API LIfe Cycle&api_name=Asteroids&api_version=Draft",
                    "protocol": "https",
                    "host": [
                        "api",
                        "getpostman",
                        "com"
                    ],
                    "path": [
                        "apis",
                        ""
                    ],
                    "query": [
                        {
                            "key": "workspace_name",
                            "value": "API LIfe Cycle"
                        },
                        {
                            "key": "api_name",
                            "value": "Asteroids"
                        },
                        {
                            "key": "api_version",
                            "value": "Draft"
                        }
                    ]
                },
                "description": "The pulls an API from Postman based upon name, then finds the underlying version, and OpenAPI schema--then loads that OpenAPI into the environment so it can be used across the different governance calls without a roundtrip to the Postman API."
            },
            "response": [
                {
                    "name": "Get single API",
                    "originalRequest": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "x-api-key",
                                "value": "{{apiKey}}",
                                "type": "text"
                            },
                            {
                                "key": "Content-Type",
                                "name": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            }
                        ],
                        "url": "{{url}}/apis/{{apiId}}"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [],
                    "cookie": [],
                    "body": "{\n\t\"api\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ]
}
